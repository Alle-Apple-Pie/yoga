/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// @generated by enums.py

#include <yoga/YGEnums.h>

const char* FBYGAlignToString(const FBYGAlign value) {
  switch (value) {
    case FBYGAlignAuto:
      return "auto";
    case FBYGAlignFlexStart:
      return "flex-start";
    case FBYGAlignCenter:
      return "center";
    case FBYGAlignFlexEnd:
      return "flex-end";
    case FBYGAlignStretch:
      return "stretch";
    case FBYGAlignBaseline:
      return "baseline";
    case FBYGAlignSpaceBetween:
      return "space-between";
    case FBYGAlignSpaceAround:
      return "space-around";
  }
  return "unknown";
}

const char* FBYGDimensionToString(const FBYGDimension value) {
  switch (value) {
    case FBYGDimensionWidth:
      return "width";
    case FBYGDimensionHeight:
      return "height";
  }
  return "unknown";
}

const char* FBYGDirectionToString(const FBYGDirection value) {
  switch (value) {
    case FBYGDirectionInherit:
      return "inherit";
    case FBYGDirectionLTR:
      return "ltr";
    case FBYGDirectionRTL:
      return "rtl";
  }
  return "unknown";
}

const char* FBYGDisplayToString(const FBYGDisplay value) {
  switch (value) {
    case FBYGDisplayFlex:
      return "flex";
    case FBYGDisplayNone:
      return "none";
  }
  return "unknown";
}

const char* FBYGEdgeToString(const FBYGEdge value) {
  switch (value) {
    case FBYGEdgeLeft:
      return "left";
    case FBYGEdgeTop:
      return "top";
    case FBYGEdgeRight:
      return "right";
    case FBYGEdgeBottom:
      return "bottom";
    case FBYGEdgeStart:
      return "start";
    case FBYGEdgeEnd:
      return "end";
    case FBYGEdgeHorizontal:
      return "horizontal";
    case FBYGEdgeVertical:
      return "vertical";
    case FBYGEdgeAll:
      return "all";
  }
  return "unknown";
}

const char* FBYGErrataToString(const FBYGErrata value) {
  switch (value) {
    case FBYGErrataNone:
      return "none";
    case FBYGErrataStretchFlexBasis:
      return "stretch-flex-basis";
    case FBYGErrataAll:
      return "all";
    case FBYGErrataClassic:
      return "classic";
  }
  return "unknown";
}

const char* FBYGExperimentalFeatureToString(const FBYGExperimentalFeature value) {
  switch (value) {
    case FBYGExperimentalFeatureWebFlexBasis:
      return "web-flex-basis";
    case FBYGExperimentalFeatureAbsolutePercentageAgainstPaddingEdge:
      return "absolute-percentage-against-padding-edge";
    case FBYGExperimentalFeatureFixJNILocalRefOverflows:
      return "fix-jnilocal-ref-overflows";
  }
  return "unknown";
}

const char* FBYGFlexDirectionToString(const FBYGFlexDirection value) {
  switch (value) {
    case FBYGFlexDirectionColumn:
      return "column";
    case FBYGFlexDirectionColumnReverse:
      return "column-reverse";
    case FBYGFlexDirectionRow:
      return "row";
    case FBYGFlexDirectionRowReverse:
      return "row-reverse";
  }
  return "unknown";
}

const char* FBYGGutterToString(const FBYGGutter value) {
  switch (value) {
    case FBYGGutterColumn:
      return "column";
    case FBYGGutterRow:
      return "row";
    case FBYGGutterAll:
      return "all";
  }
  return "unknown";
}

const char* FBYGJustifyToString(const FBYGJustify value) {
  switch (value) {
    case FBYGJustifyFlexStart:
      return "flex-start";
    case FBYGJustifyCenter:
      return "center";
    case FBYGJustifyFlexEnd:
      return "flex-end";
    case FBYGJustifySpaceBetween:
      return "space-between";
    case FBYGJustifySpaceAround:
      return "space-around";
    case FBYGJustifySpaceEvenly:
      return "space-evenly";
  }
  return "unknown";
}

const char* FBYGLogLevelToString(const FBYGLogLevel value) {
  switch (value) {
    case FBYGLogLevelError:
      return "error";
    case FBYGLogLevelWarn:
      return "warn";
    case FBYGLogLevelInfo:
      return "info";
    case FBYGLogLevelDebug:
      return "debug";
    case FBYGLogLevelVerbose:
      return "verbose";
    case FBYGLogLevelFatal:
      return "fatal";
  }
  return "unknown";
}

const char* FBYGMeasureModeToString(const FBYGMeasureMode value) {
  switch (value) {
    case FBYGMeasureModeUndefined:
      return "undefined";
    case FBYGMeasureModeExactly:
      return "exactly";
    case FBYGMeasureModeAtMost:
      return "at-most";
  }
  return "unknown";
}

const char* FBYGNodeTypeToString(const FBYGNodeType value) {
  switch (value) {
    case FBYGNodeTypeDefault:
      return "default";
    case FBYGNodeTypeText:
      return "text";
  }
  return "unknown";
}

const char* FBYGOverflowToString(const FBYGOverflow value) {
  switch (value) {
    case FBYGOverflowVisible:
      return "visible";
    case FBYGOverflowHidden:
      return "hidden";
    case FBYGOverflowScroll:
      return "scroll";
  }
  return "unknown";
}

const char* FBYGPositionTypeToString(const FBYGPositionType value) {
  switch (value) {
    case FBYGPositionTypeStatic:
      return "static";
    case FBYGPositionTypeRelative:
      return "relative";
    case FBYGPositionTypeAbsolute:
      return "absolute";
  }
  return "unknown";
}

const char* FBYGPrintOptionsToString(const FBYGPrintOptions value) {
  switch (value) {
    case FBYGPrintOptionsLayout:
      return "layout";
    case FBYGPrintOptionsStyle:
      return "style";
    case FBYGPrintOptionsChildren:
      return "children";
  }
  return "unknown";
}

const char* FBYGUnitToString(const FBYGUnit value) {
  switch (value) {
    case FBYGUnitUndefined:
      return "undefined";
    case FBYGUnitPoint:
      return "point";
    case FBYGUnitPercent:
      return "percent";
    case FBYGUnitAuto:
      return "auto";
  }
  return "unknown";
}

const char* FBYGWrapToString(const FBYGWrap value) {
  switch (value) {
    case FBYGWrapNoWrap:
      return "no-wrap";
    case FBYGWrapWrap:
      return "wrap";
    case FBYGWrapWrapReverse:
      return "wrap-reverse";
  }
  return "unknown";
}
